order_book.py
    - creates the limit orderbook. Includes two sides, and takes the order side, price, quantity, timestamp, as well as the orderlorg

Functions:

__init__(self)
    - stores bid and ask sides as hashmaps. also has the orderlog as a list

add_order(self, order):
    -Record the order with the orderside, price, quantity, current timestamp
    -Consolidate bids and asks at price levels, if a bid/ask price exists, it is added to a quantity sum at that price level

get_combined_depth(self):
    -Convert the bids and asks dictionaries to DataFrames, keeping both price and quantity
    -Ensure both DataFrames are of the same length by padding the shorter one
    -Ensure the first values (for spread calculation) are numeric
    -Calculate the spread (difference between the lowest ask and highest bid)
    -Return bids, asks, and the calculated spread



get_order_log(self):
    -Return the log of orders placed


    to do for me:
    implement an order type
    market order, limit order 
    use a queue system
